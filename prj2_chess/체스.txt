package Chess;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

import javax.swing.*;
import javax.swing.border.*;
//======================================================Don't modify below===============================================================//
enum PieceType {king, queen, bishop, knight, rook, pawn, none}
enum PlayerColor {black, white, none}

public class ChessBoard {
	private final JPanel gui = new JPanel(new BorderLayout(3, 3));
	private JPanel chessBoard;
	private JButton[][] chessBoardSquares = new JButton[8][8];
	private Piece[][] chessBoardStatus = new Piece[8][8];
	private ImageIcon[] pieceImage_b = new ImageIcon[7];
	private ImageIcon[] pieceImage_w = new ImageIcon[7];
	private JLabel message = new JLabel("Enter Reset to Start");

	ChessBoard(){
		initPieceImages();
		initBoardStatus();
		initializeGui();
	}
	
	public final void initBoardStatus(){
		for(int i=0;i<8;i++){
			for(int j=0;j<8;j++) chessBoardStatus[j][i] = new Piece();
		}
	}
	
	public final void initPieceImages(){
		pieceImage_b[0] = new ImageIcon(new ImageIcon("./img/king_b.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_b[1] = new ImageIcon(new ImageIcon("./img/queen_b.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_b[2] = new ImageIcon(new ImageIcon("./img/bishop_b.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_b[3] = new ImageIcon(new ImageIcon("./img/knight_b.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_b[4] = new ImageIcon(new ImageIcon("./img/rook_b.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_b[5] = new ImageIcon(new ImageIcon("./img/pawn_b.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_b[6] = new ImageIcon(new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
		
		pieceImage_w[0] = new ImageIcon(new ImageIcon("./img/king_w.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_w[1] = new ImageIcon(new ImageIcon("./img/queen_w.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_w[2] = new ImageIcon(new ImageIcon("./img/bishop_w.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_w[3] = new ImageIcon(new ImageIcon("./img/knight_w.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_w[4] = new ImageIcon(new ImageIcon("./img/rook_w.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_w[5] = new ImageIcon(new ImageIcon("./img/pawn_w.png").getImage().getScaledInstance(64, 64, java.awt.Image.SCALE_SMOOTH));
		pieceImage_w[6] = new ImageIcon(new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
	}
	
	public ImageIcon getImageIcon(Piece piece){
		if(piece.color.equals(PlayerColor.black)){
			if(piece.type.equals(PieceType.king)) return pieceImage_b[0];
			else if(piece.type.equals(PieceType.queen)) return pieceImage_b[1];
			else if(piece.type.equals(PieceType.bishop)) return pieceImage_b[2];
			else if(piece.type.equals(PieceType.knight)) return pieceImage_b[3];
			else if(piece.type.equals(PieceType.rook)) return pieceImage_b[4];
			else if(piece.type.equals(PieceType.pawn)) return pieceImage_b[5];
			else return pieceImage_b[6];
		}
		else if(piece.color.equals(PlayerColor.white)){
			if(piece.type.equals(PieceType.king)) return pieceImage_w[0];
			else if(piece.type.equals(PieceType.queen)) return pieceImage_w[1];
			else if(piece.type.equals(PieceType.bishop)) return pieceImage_w[2];
			else if(piece.type.equals(PieceType.knight)) return pieceImage_w[3];
			else if(piece.type.equals(PieceType.rook)) return pieceImage_w[4];
			else if(piece.type.equals(PieceType.pawn)) return pieceImage_w[5];
			else return pieceImage_w[6];
		}
		else return pieceImage_w[6];
	}

	public final void initializeGui(){
		gui.setBorder(new EmptyBorder(5, 5, 5, 5));
	    JToolBar tools = new JToolBar();
	    tools.setFloatable(false);
	    gui.add(tools, BorderLayout.PAGE_START);
	    JButton startButton = new JButton("Reset");
	    startButton.addActionListener(new ActionListener(){
	    	public void actionPerformed(ActionEvent e){
	    		initiateBoard();
	    	}
	    });
	    
	    tools.add(startButton);
	    tools.addSeparator();
	    tools.add(message);

	    chessBoard = new JPanel(new GridLayout(0, 8));
	    chessBoard.setBorder(new LineBorder(Color.BLACK));
	    gui.add(chessBoard);
	    ImageIcon defaultIcon = new ImageIcon(new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
	    Insets buttonMargin = new Insets(0,0,0,0);
	    for(int i=0; i<chessBoardSquares.length; i++) {
	        for (int j = 0; j < chessBoardSquares[i].length; j++) {
	        	JButton b = new JButton();
	        	b.addActionListener(new ButtonListener(i, j));
	            b.setMargin(buttonMargin);
	            b.setIcon(defaultIcon);
	            if((j % 2 == 1 && i % 2 == 1)|| (j % 2 == 0 && i % 2 == 0)) b.setBackground(Color.WHITE);
	            else b.setBackground(Color.gray);
	            b.setOpaque(true);
	            b.setBorderPainted(false);
	            chessBoardSquares[j][i] = b;
	        }
	    }

	    for (int i=0; i < 8; i++) {
	        for (int j=0; j < 8; j++) chessBoard.add(chessBoardSquares[j][i]);
	        
	    }
	}

	public final JComponent getGui() {
	    return gui;
	}
	
	public static void main(String[] args) {
	    Runnable r = new Runnable() {
	        @Override
	        public void run() {
	        	ChessBoard cb = new ChessBoard();
                JFrame f = new JFrame("Chess");
                f.add(cb.getGui());
                f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                f.setLocationByPlatform(true);
                f.setResizable(false);
                f.pack();
                f.setMinimumSize(f.getSize());
                f.setVisible(true);
            }
        };
        SwingUtilities.invokeLater(r);
	}
		
			//================================Utilize these functions========================================//	
	
	class Piece{
		PlayerColor color;
		PieceType type;
		
		Piece(){
			color = PlayerColor.none;
			type = PieceType.none;
		}
		Piece(PlayerColor color, PieceType type){
			this.color = color;
			this.type = type;
		}
	}
	
	public void setIcon(int x, int y, Piece piece){
		chessBoardSquares[y][x].setIcon(getImageIcon(piece));
		chessBoardStatus[y][x] = piece;
	}
	
	public Piece getIcon(int x, int y){
		return chessBoardStatus[y][x];
	}
	
	public void markPosition(int x, int y){
		chessBoardSquares[y][x].setBackground(Color.pink);
	}
	
	public void unmarkPosition(int x, int y){
		if((y % 2 == 1 && x % 2 == 1)|| (y % 2 == 0 && x % 2 == 0)) chessBoardSquares[y][x].setBackground(Color.WHITE);
		else chessBoardSquares[y][x].setBackground(Color.gray);
	}
	
	public void setStatus(String inpt){
		message.setText(inpt);
	}
	
	public void initiateBoard(){
		for(int i=0;i<8;i++){
			for(int j=0;j<8;j++) setIcon(i, j, new Piece());
		}
		setIcon(0, 0, new Piece(PlayerColor.black, PieceType.rook));
		setIcon(0, 1, new Piece(PlayerColor.black, PieceType.knight));
		setIcon(0, 2, new Piece(PlayerColor.black, PieceType.bishop));
		setIcon(0, 3, new Piece(PlayerColor.black, PieceType.queen));
		setIcon(0, 4, new Piece(PlayerColor.black, PieceType.king));
		setIcon(0, 5, new Piece(PlayerColor.black, PieceType.bishop));
		setIcon(0, 6, new Piece(PlayerColor.black, PieceType.knight));
		setIcon(0, 7, new Piece(PlayerColor.black, PieceType.rook));
		for(int i=0;i<8;i++){
			setIcon(1, i, new Piece(PlayerColor.black, PieceType.pawn));
			setIcon(6, i, new Piece(PlayerColor.white, PieceType.pawn));
		}
		setIcon(7, 0, new Piece(PlayerColor.white, PieceType.rook));
		setIcon(7, 1, new Piece(PlayerColor.white, PieceType.knight));
		setIcon(7, 2, new Piece(PlayerColor.white, PieceType.bishop));
		setIcon(7, 3, new Piece(PlayerColor.white, PieceType.queen));
		setIcon(7, 4, new Piece(PlayerColor.white, PieceType.king));
		setIcon(7, 5, new Piece(PlayerColor.white, PieceType.bishop));
		setIcon(7, 6, new Piece(PlayerColor.white, PieceType.knight));
		setIcon(7, 7, new Piece(PlayerColor.white, PieceType.rook));
		for(int i=0;i<8;i++){
			for(int j=0;j<8;j++) unmarkPosition(i, j);
		}
		onInitiateBoard();
	}
//======================================================Don't modify above==============================================================//	




//======================================================Implement below=================================================================//		
	enum MagicType {MARK, CHECK, CHECKMATE}
	enum TURN {BLACK_TURN, WHITE_TURN, GAME_OVER}
	TURN turn = TURN.BLACK_TURN;
	private int selX, selY;
	private boolean check, checkmate, end;
	class ButtonListener implements ActionListener{
		int x;
		int y;
		ButtonListener(int x, int y){
			this.x = x;
			this.y = y;
		}
		public void unmarkAll(){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++)	unmarkPosition(i, j);
			}
		}
		
		
		public void actionPerformed(ActionEvent e) {	// Only modify here
			// (x, y) is where the click event occured
				
		if(turn == TURN.BLACK_TURN){ //black's turn 시작
			if(getIcon(x,y).color == PlayerColor.black){
				unmarkAll(); //이전의 pink 타일 선택해제
			if(getIcon(x,y).type == PieceType.pawn ){
				if(x+1 < 8 && getIcon(x+1,y).color == PlayerColor.none ) markPosition(x+1,y);
				if(x+1 < 8 && y-1>=0 && getIcon(x+1,y-1).color == PlayerColor.white ) markPosition(x+1, y-1);
				if(x+1 < 8 && y+1<8 && getIcon(x+1,y+1).color == PlayerColor.white ) markPosition(x+1, y+1);
				
				if(x == 1 && getIcon(x+1,y).color == PlayerColor.none && getIcon(x+2,y).color == PlayerColor.none) markPosition(x+2,y);
				selX = x; selY = y;
			}
			else if(getIcon(x,y).type == PieceType.rook ){
				Click_rook(x, y, PlayerColor.black, PlayerColor.white);
			}
			else if(getIcon(x,y).type == PieceType.knight ){
				Click_knight(x, y, PlayerColor.black);
			}
			else if(getIcon(x,y).type == PieceType.bishop ){
				Click_bishop(x, y ,PlayerColor.black, PlayerColor.white);
			}
			else if(getIcon(x,y).type == PieceType.king ){
				Click_king(x, y ,PlayerColor.black);
			}
			else if(getIcon(x,y).type == PieceType.queen ){
				Click_rook(x, y, PlayerColor.black, PlayerColor.white);
				Click_bishop(x, y ,PlayerColor.black, PlayerColor.white);
				Click_king(x, y ,PlayerColor.black);
			}
			
			}
			else if((chessBoardSquares[y][x].getBackground() != Color.pink) && ((getIcon(x,y).color == PlayerColor.none || getIcon(x,y).type == PieceType.none)
					|| getIcon(x,y).color == PlayerColor.white)){
				unmarkAll();
			}
			else if(chessBoardSquares[y][x].getBackground() == Color.pink){
				if(chessBoardStatus[y][x].color == PlayerColor.white && chessBoardStatus[y][x].type == PieceType.king){
					setIcon(x, y, getIcon(selX, selY));
					setIcon(selX, selY, new Piece(PlayerColor.none, PieceType.none));
					unmarkAll();
					setStatus("BLACK WINS!");	//검은색 승리
					turn = TURN.GAME_OVER;	//게임 끝
				}
				else{
					setIcon(x, y, getIcon(selX, selY));
					setIcon(selX, selY, new Piece(PlayerColor.none, PieceType.none));
					unmarkAll();
					Checkmate_On_White_Turn();
					if(checkmate){
						for(int i=0;i<8;i++)
							for(int j=0;j<8;j++){
								if(chessBoardStatus[j][i].color == PlayerColor.white && chessBoardStatus[j][i].type == PieceType.king){
									chessBoardSquares[j][i].setBackground(Color.red);	//체크메이트 당한 king을 빨간색으로 표시
								}
						}
						setStatus("WHITE'S TURN | CHECKMATE");
						turn = TURN.GAME_OVER;	//게임 끝
					}else{
						Check_On_White_Turn();
						if(end){
							setStatus("WHITE'S TURN");
							turn = TURN.WHITE_TURN;
						}
						else if(check){
							setStatus("WHITE'S TURN | CHECK");
							turn = TURN.WHITE_TURN;
						}
					}
				}
			}
			
		} //black's turn 끝
			
		else if(turn == TURN.WHITE_TURN){ //white's turn 시작
			if(getIcon(x,y).color == PlayerColor.white){
				unmarkAll(); //이전의 pink 타일 선택해제
			if(getIcon(x,y).type == PieceType.pawn ){
				if(x-1 >= 0 && getIcon(x-1,y).color == PlayerColor.none ) markPosition(x-1,y);
				if(x-1 >= 0 && y-1>=0 && getIcon(x-1,y-1).color == PlayerColor.black ) markPosition(x-1, y-1);
				if(x-1 >= 0 && y+1<8 && getIcon(x-1,y+1).color == PlayerColor.black ) markPosition(x-1, y+1);
				
				if(x == 6 && getIcon(x-1,y).color == PlayerColor.none && getIcon(x-2,y).color == PlayerColor.none) markPosition(x-2,y);
				selX = x; selY = y;
			}
			else if(getIcon(x,y).type == PieceType.rook ){
				Click_rook(x, y, PlayerColor.white, PlayerColor.black);
			}
			else if(getIcon(x,y).type == PieceType.knight ){
				Click_knight(x, y, PlayerColor.white);
			}
			else if(getIcon(x,y).type == PieceType.bishop ){
				Click_bishop(x, y ,PlayerColor.white, PlayerColor.black);
			}
			else if(getIcon(x,y).type == PieceType.king ){
				Click_king(x, y ,PlayerColor.white);
			}
			else if(getIcon(x,y).type == PieceType.queen ){
				Click_rook(x, y, PlayerColor.white, PlayerColor.black);
				Click_bishop(x, y ,PlayerColor.white, PlayerColor.black);
				Click_king(x, y ,PlayerColor.white);
			}
			
			}
			else if((chessBoardSquares[y][x].getBackground() != Color.pink) && ((getIcon(x,y).color == PlayerColor.none || getIcon(x,y).type == PieceType.none)
					|| getIcon(x,y).color == PlayerColor.black)){
				unmarkAll();
			}
			else if(chessBoardSquares[y][x].getBackground() == Color.pink){
				if(chessBoardStatus[y][x].color == PlayerColor.black && chessBoardStatus[y][x].type == PieceType.king){
					setIcon(x, y, getIcon(selX, selY));
					setIcon(selX, selY, new Piece(PlayerColor.none, PieceType.none));
					unmarkAll();
					setStatus("WHITE WINS!");	//흰색 승리
					turn = TURN.GAME_OVER;	//게임 끝
				}
				else{
					setIcon(x, y, getIcon(selX, selY));
					setIcon(selX, selY, new Piece(PlayerColor.none, PieceType.none));
					unmarkAll();
					Checkmate_On_Black_Turn();
					if(checkmate){
						for(int i=0;i<8;i++)
							for(int j=0;j<8;j++){
								if(chessBoardStatus[j][i].color == PlayerColor.black && chessBoardStatus[j][i].type == PieceType.king){
									chessBoardSquares[j][i].setBackground(Color.red); 		//체크메이트당한 king을 빨간색으로 표시
								}
						}
						setStatus("BLACK'S TURN | CHECKMATE");
						turn = TURN.GAME_OVER;	//게임 끝
					}else{
						Check_On_Black_Turn();
						if(end){
							setStatus("BLACK'S TURN");
							turn = TURN.BLACK_TURN;
						}
						else if(check){
							setStatus("BLACK'S TURN | CHECK");
							turn = TURN.BLACK_TURN;
						}
					}
				}
			}
		} //white's turn 끝
		
		}
	}
	
	void Click_rook(int x, int y, PlayerColor Player_color, PlayerColor Enemy_color){
		for(int i=1; x+i<8; i++){
			if(getIcon(x+i,y).color == Player_color) break; 
			else if(getIcon(x+i,y).color == Enemy_color){
				markPosition(x+i, y);
				break; 
			}
			else markPosition(x+i, y);
		}
		for(int i=1; x-i>=0; i++){
			if(getIcon(x-i,y).color == Player_color) break; 
			else if(getIcon(x-i,y).color == Enemy_color){
				markPosition(x-i, y);
				break; 
			}
			else markPosition(x-i, y);
		}
		for(int i=1; y+i<8; i++){
			if(getIcon(x,y+i).color == Player_color) break;
			else if(getIcon(x,y+i).color == Enemy_color){
				markPosition(x, y+i);
				break; 
			}
			else markPosition(x, y+i);
		}
		for(int i=1; y-i>=0; i++){
			if(getIcon(x,y-i).color == Player_color) break;
			else if(getIcon(x,y-i).color == Enemy_color){
				markPosition(x, y-i);
				break; 
			}
			else markPosition(x, y-i);
		}
		selX = x; selY = y;
	}
	void Click_knight(int x, int y, PlayerColor Player_color){
		if(x+2 < 8 && y+1 < 8 && getIcon(x+2,y+1).color != Player_color) markPosition(x+2,y+1);
		if(x+2 < 8 && y-1 >= 0 && getIcon(x+2,y-1).color != Player_color) markPosition(x+2,y-1);
		if(x+1 < 8 && y+2 < 8 && getIcon(x+1,y+2).color != Player_color) markPosition(x+1,y+2);
		if(x+1 < 8 && y-2 >= 0 && getIcon(x+1,y-2).color != Player_color) markPosition(x+1,y-2);
		
		if(x-2 >= 0 && y+1 < 8 && getIcon(x-2,y+1).color != Player_color) markPosition(x-2,y+1);
		if(x-2 >= 0 && y-1 >= 0 && getIcon(x-2,y-1).color != Player_color) markPosition(x-2,y-1);
		if(x-1 >= 0 && y+2 < 8 && getIcon(x-1,y+2).color != Player_color) markPosition(x-1,y+2);
		if(x-1 >= 0 && y-2 >= 0 && getIcon(x-1,y-2).color != Player_color) markPosition(x-1,y-2);
		
		selX = x; selY = y;
	}
	void Click_bishop(int x, int y, PlayerColor Player_color, PlayerColor Enemy_color){
		for(int i=1; x+i<8 && y+i<8; i++){
			if(getIcon(x+i, y+i).color == Player_color) break; 
			else if(getIcon(x+i, y+i).color == Enemy_color){
				markPosition(x+i, y+i);
				break; 
			}
			else markPosition(x+i, y+i);
		}
		for(int i=1; x+i<8 && y-i>=0; i++){
			if(getIcon(x+i, y-i).color == Player_color) break; 
			else if(getIcon(x+i, y-i).color == Enemy_color){
				markPosition(x+i, y-i);
				break; 
			}
			else markPosition(x+i, y-i);
		}
		for(int i=1; x-i>=0 && y+i<8 ; i++){
			if(getIcon(x-i, y+i).color == Player_color) break; 
			else if(getIcon(x-i, y+i).color == Enemy_color){
				markPosition(x-i, y+i);
				break; 
			}
			else markPosition(x-i, y+i);
		}
		for(int i=1;  x-i>=0 && y-i>=0; i++){
			if(getIcon(x-i, y-i).color == Player_color) break; 
			else if(getIcon(x-i, y-i).color == Enemy_color){
				markPosition(x-i, y-i);
				break; 
			}
			else markPosition(x-i, y-i);
		}
		selX = x; selY = y;
	}
	void Click_king(int x, int y, PlayerColor Player_color){
		if(x+1<8 && getIcon(x+1,y).color != Player_color) markPosition(x+1,y);
		if(x+1<8 && y+1<8 && getIcon(x+1,y+1).color != Player_color) markPosition(x+1,y+1);
		if(x+1<8 && y-1>=0 && getIcon(x+1,y-1).color != Player_color) markPosition(x+1,y-1);
		if(y+1<8 && getIcon(x,y+1).color != Player_color) markPosition(x,y+1);
		if(y-1>=0 && getIcon(x,y-1).color != Player_color) markPosition(x,y-1);
		if(x-1>=0 && getIcon(x-1,y).color != Player_color) markPosition(x-1,y);
		if(x-1>=0 && y+1<8 && getIcon(x-1,y+1).color != Player_color) markPosition(x-1,y+1);
		if(x-1>=0 && y-1>=0 && getIcon(x-1,y-1).color != Player_color) markPosition(x-1,y-1);
		
		selX = x; selY = y;
	}
	
	
	boolean Check_On_White_Turn(){
		end = false; check = false; checkmate = false;
		
		for(int x=0; x<8; x++)
			for(int y=0; y<8; y++){
				if(chessBoardStatus[y][x].color == PlayerColor.black){
					if(chessBoardStatus[y][x].type == PieceType.pawn){
						if(x+1 < 8 && y-1>=0 && chessBoardStatus[y-1][x+1].color == PlayerColor.white && chessBoardStatus[y-1][x+1].type == PieceType.king) return check = true;
						if(x+1 < 8 && y+1<8 && chessBoardStatus[y+1][x+1].color == PlayerColor.white && chessBoardStatus[y+1][x+1].type == PieceType.king) return check = true; 
					}
					else if(chessBoardStatus[y][x].type == PieceType.rook ){
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y][x+i].color == PlayerColor.white){
								if(chessBoardStatus[y][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y][x-i].color == PlayerColor.white){
								if(chessBoardStatus[y][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y+i][x].color == PlayerColor.white){
								if(chessBoardStatus[y+i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y-i][x].color == PlayerColor.white){
								if(chessBoardStatus[y-i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.knight ){
						if(x+2 < 8 && y+1 < 8 && chessBoardStatus[y+1][x+2].color == PlayerColor.white && chessBoardStatus[y+1][x+2].type == PieceType.king ) return check = true; 
						if(x+2 < 8 && y-1 >= 0 && chessBoardStatus[y-1][x+2].color == PlayerColor.white && chessBoardStatus[y-1][x+2].type == PieceType.king ) return check = true;
						if(x+1 < 8 && y+2 < 8 && chessBoardStatus[y+2][x+1].color == PlayerColor.white && chessBoardStatus[y+2][x+1].type == PieceType.king ) return check = true; 
						if(x+1 < 8 && y-2 >= 0 && chessBoardStatus[y-2][x+1].color == PlayerColor.white && chessBoardStatus[y-2][x+1].type == PieceType.king ) return check = true;
						
						if(x-2 >= 0 && y+1 < 8 && chessBoardStatus[y+1][x-2].color == PlayerColor.white && chessBoardStatus[y+1][x-2].type == PieceType.king ) return check = true;
						if(x-2 >= 0 && y-1 >= 0 && chessBoardStatus[y-1][x-2].color == PlayerColor.white && chessBoardStatus[y-1][x-2].type == PieceType.king ) return check = true;
						if(x-1 >= 0 && y+2 < 8 && chessBoardStatus[y+2][x-1].color == PlayerColor.white && chessBoardStatus[y+2][x-1].type == PieceType.king ) return check = true;
						if(x-1 >= 0 && y-2 >= 0 && chessBoardStatus[y-2][x-1].color == PlayerColor.white && chessBoardStatus[y-2][x-1].type == PieceType.king ) return check = true;
					}
					else if(chessBoardStatus[y][x].type == PieceType.bishop ){
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y+i][x+i].color == PlayerColor.white){
								if(chessBoardStatus[y+i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y-i][x+i].color == PlayerColor.white){
								if(chessBoardStatus[y-i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y+i][x-i].color == PlayerColor.white){
								if(chessBoardStatus[y+i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y-i][x-i].color == PlayerColor.white){
								if(chessBoardStatus[y-i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.king ){
						if(x+1<8 && chessBoardStatus[y][x+1].color == PlayerColor.white && chessBoardStatus[y][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y+1<8 && chessBoardStatus[y+1][x+1].color == PlayerColor.white && chessBoardStatus[y+1][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y-1>=0 && chessBoardStatus[y-1][x+1].color == PlayerColor.white && chessBoardStatus[y-1][x+1].type == PieceType.king) return check = true;
						if(y+1<8 && chessBoardStatus[y+1][x].color == PlayerColor.white && chessBoardStatus[y+1][x].type == PieceType.king) return check = true;
						if(y-1>=0 && chessBoardStatus[y-1][x].color == PlayerColor.white && chessBoardStatus[y-1][x].type == PieceType.king) return check = true;
						if(x-1>=0 && chessBoardStatus[y][x-1].color == PlayerColor.white && chessBoardStatus[y][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y+1<8 && chessBoardStatus[y+1][x-1].color == PlayerColor.white && chessBoardStatus[y+1][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y-1>=0 && chessBoardStatus[y-1][x-1].color == PlayerColor.white && chessBoardStatus[y-1][x-1].type == PieceType.king) return check = true;
					}
					else if(chessBoardStatus[y][x].type == PieceType.queen){
						if(x+1<8 && chessBoardStatus[y][x+1].color == PlayerColor.white && chessBoardStatus[y][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y+1<8 && chessBoardStatus[y+1][x+1].color == PlayerColor.white && chessBoardStatus[y+1][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y-1>=0 && chessBoardStatus[y-1][x+1].color == PlayerColor.white && chessBoardStatus[y-1][x+1].type == PieceType.king) return check = true;
						if(y+1<8 && chessBoardStatus[y+1][x].color == PlayerColor.white && chessBoardStatus[y+1][x].type == PieceType.king) return check = true;
						if(y-1>=0 && chessBoardStatus[y-1][x].color == PlayerColor.white && chessBoardStatus[y-1][x].type == PieceType.king) return check = true;
						if(x-1>=0 && chessBoardStatus[y][x-1].color == PlayerColor.white && chessBoardStatus[y][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y+1<8 && chessBoardStatus[y+1][x-1].color == PlayerColor.white && chessBoardStatus[y+1][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y-1>=0 && chessBoardStatus[y-1][x-1].color == PlayerColor.white && chessBoardStatus[y-1][x-1].type == PieceType.king) return check = true;
					
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y+i][x+i].color == PlayerColor.white){
								if(chessBoardStatus[y+i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y-i][x+i].color == PlayerColor.white){
								if(chessBoardStatus[y-i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y+i][x-i].color == PlayerColor.white){
								if(chessBoardStatus[y+i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y-i][x-i].color == PlayerColor.white){
								if(chessBoardStatus[y-i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y][x+i].color == PlayerColor.white){
								if(chessBoardStatus[y][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y][x-i].color == PlayerColor.white){
								if(chessBoardStatus[y][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y+i][x].color == PlayerColor.white){
								if(chessBoardStatus[y+i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.black) break; 
							else if(chessBoardStatus[y-i][x].color == PlayerColor.white){
								if(chessBoardStatus[y-i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
					}
				}
			}
		return end = true;
	}
	
	boolean Check_On_Black_Turn(){
		end = false; check = false; checkmate = false;
		
		for(int x=0; x<8; x++)
			for(int y=0; y<8; y++){
				if(chessBoardStatus[y][x].color == PlayerColor.white){
					if(chessBoardStatus[y][x].type == PieceType.pawn){
						if(x-1 < 8 && y-1>=0 && chessBoardStatus[y-1][x-1].color == PlayerColor.black && chessBoardStatus[y-1][x-1].type == PieceType.king) return check = true;
						if(x-1 < 8 && y+1<8 && chessBoardStatus[y+1][x-1].color == PlayerColor.black && chessBoardStatus[y+1][x-1].type == PieceType.king) return check = true; 
					}
					else if(chessBoardStatus[y][x].type == PieceType.rook ){
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y][x+i].color == PlayerColor.black){
								if(chessBoardStatus[y][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y][x-i].color == PlayerColor.black){
								if(chessBoardStatus[y][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y+i][x].color == PlayerColor.black){
								if(chessBoardStatus[y+i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y-i][x].color == PlayerColor.black){
								if(chessBoardStatus[y-i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.knight ){
						if(x+2 < 8 && y+1 < 8 && chessBoardStatus[y+1][x+2].color == PlayerColor.black && chessBoardStatus[y+1][x+2].type == PieceType.king ) return check = true; 
						if(x+2 < 8 && y-1 >= 0 && chessBoardStatus[y-1][x+2].color == PlayerColor.black && chessBoardStatus[y-1][x+2].type == PieceType.king ) return check = true;
						if(x+1 < 8 && y+2 < 8 && chessBoardStatus[y+2][x+1].color == PlayerColor.black && chessBoardStatus[y+2][x+1].type == PieceType.king ) return check = true; 
						if(x+1 < 8 && y-2 >= 0 && chessBoardStatus[y-2][x+1].color == PlayerColor.black && chessBoardStatus[y-2][x+1].type == PieceType.king ) return check = true;
						
						if(x-2 >= 0 && y+1 < 8 && chessBoardStatus[y+1][x-2].color == PlayerColor.black && chessBoardStatus[y+1][x-2].type == PieceType.king ) return check = true;
						if(x-2 >= 0 && y-1 >= 0 && chessBoardStatus[y-1][x-2].color == PlayerColor.black && chessBoardStatus[y-1][x-2].type == PieceType.king ) return check = true;
						if(x-1 >= 0 && y+2 < 8 && chessBoardStatus[y+2][x-1].color == PlayerColor.black && chessBoardStatus[y+2][x-1].type == PieceType.king ) return check = true;
						if(x-1 >= 0 && y-2 >= 0 && chessBoardStatus[y-2][x-1].color == PlayerColor.black && chessBoardStatus[y-2][x-1].type == PieceType.king ) return check = true;
					}
					else if(chessBoardStatus[y][x].type == PieceType.bishop ){
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y+i][x+i].color == PlayerColor.black){
								if(chessBoardStatus[y+i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y-i][x+i].color == PlayerColor.black){
								if(chessBoardStatus[y-i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y+i][x-i].color == PlayerColor.black){
								if(chessBoardStatus[y+i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y-i][x-i].color == PlayerColor.black){
								if(chessBoardStatus[y-i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.king ){
						if(x+1<8 && chessBoardStatus[y][x+1].color == PlayerColor.black && chessBoardStatus[y][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y+1<8 && chessBoardStatus[y+1][x+1].color == PlayerColor.black && chessBoardStatus[y+1][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y-1>=0 && chessBoardStatus[y-1][x+1].color == PlayerColor.black && chessBoardStatus[y-1][x+1].type == PieceType.king) return check = true;
						if(y+1<8 && chessBoardStatus[y+1][x].color == PlayerColor.black && chessBoardStatus[y+1][x].type == PieceType.king) return check = true;
						if(y-1>=0 && chessBoardStatus[y-1][x].color == PlayerColor.black && chessBoardStatus[y-1][x].type == PieceType.king) return check = true;
						if(x-1>=0 && chessBoardStatus[y][x-1].color == PlayerColor.black && chessBoardStatus[y][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y+1<8 && chessBoardStatus[y+1][x-1].color == PlayerColor.black && chessBoardStatus[y+1][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y-1>=0 && chessBoardStatus[y-1][x-1].color == PlayerColor.black && chessBoardStatus[y-1][x-1].type == PieceType.king) return check = true;
					}
					else if(chessBoardStatus[y][x].type == PieceType.queen){
						if(x+1<8 && chessBoardStatus[y][x+1].color == PlayerColor.black && chessBoardStatus[y][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y+1<8 && chessBoardStatus[y+1][x+1].color == PlayerColor.black && chessBoardStatus[y+1][x+1].type == PieceType.king) return check = true;
						if(x+1<8 && y-1>=0 && chessBoardStatus[y-1][x+1].color == PlayerColor.black && chessBoardStatus[y-1][x+1].type == PieceType.king) return check = true;
						if(y+1<8 && chessBoardStatus[y+1][x].color == PlayerColor.black && chessBoardStatus[y+1][x].type == PieceType.king) return check = true;
						if(y-1>=0 && chessBoardStatus[y-1][x].color == PlayerColor.black && chessBoardStatus[y-1][x].type == PieceType.king) return check = true;
						if(x-1>=0 && chessBoardStatus[y][x-1].color == PlayerColor.black && chessBoardStatus[y][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y+1<8 && chessBoardStatus[y+1][x-1].color == PlayerColor.black && chessBoardStatus[y+1][x-1].type == PieceType.king) return check = true;
						if(x-1>=0 && y-1>=0 && chessBoardStatus[y-1][x-1].color == PlayerColor.black && chessBoardStatus[y-1][x-1].type == PieceType.king) return check = true;
					
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y+i][x+i].color == PlayerColor.black){
								if(chessBoardStatus[y+i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y-i][x+i].color == PlayerColor.black){
								if(chessBoardStatus[y-i][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y+i][x-i].color == PlayerColor.black){
								if(chessBoardStatus[y+i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y-i][x-i].color == PlayerColor.black){
								if(chessBoardStatus[y-i][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y][x+i].color == PlayerColor.black){
								if(chessBoardStatus[y][x+i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y][x-i].color == PlayerColor.black){
								if(chessBoardStatus[y][x-i].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y+i][x].color == PlayerColor.black){
								if(chessBoardStatus[y+i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.white) break; 
							else if(chessBoardStatus[y-i][x].color == PlayerColor.black){
								if(chessBoardStatus[y-i][x].type == PieceType.king) return check = true;
								else break;
							}
						}
					}
				}
			}
		return end = true;
	}
	
	boolean Checkmate_On_White_Turn(){
		Check_On_White_Turn();
		if(!check) return false;	//체크가 아니라면 체크메이트도 아니므로 함수 종료.
		
		end = false; check = false; checkmate = false;
		Piece memory_Piece = new Piece(PlayerColor.none, PieceType.none);
		
		for(int x=0; x<8; x++)
			for(int y=0; y<8; y++){
				if(chessBoardStatus[y][x].color == PlayerColor.white){
					if(chessBoardStatus[y][x].type == PieceType.pawn){
						if(x-1 >= 0 && getIcon(x-1,y).color == PlayerColor.none ){
							if(Checkmate_On_White_Type(-1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y-1>=0 && getIcon(x-1,y-1).color == PlayerColor.black ){
							if(Checkmate_On_White_Type(-1, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y+1<8 && getIcon(x-1,y+1).color == PlayerColor.black ){
							if(Checkmate_On_White_Type(-1, 1, x, y, memory_Piece) == false ) return false;
						}
						
						if(x == 6 && getIcon(x-1,y).color == PlayerColor.none && getIcon(x-2,y).color == PlayerColor.none){
							if(Checkmate_On_White_Type(-2, 0, x, y, memory_Piece) == false ) return false;
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.rook){
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.white) break; 		//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(i, 0, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x+i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(-i, 0, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x-i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(0, i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y+i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(0, -i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y-i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.knight){
						if(x+2 < 8 && y+1 < 8 && (chessBoardStatus[y+1][x+2].color == PlayerColor.none || chessBoardStatus[y+1][x+2].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(2, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x+2 < 8 && y-1 >= 0 && (chessBoardStatus[y-1][x+2].color == PlayerColor.none || chessBoardStatus[y-1][x+2].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(2, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x+1 < 8 && y+2 < 8 && (chessBoardStatus[y+2][x+1].color == PlayerColor.none || chessBoardStatus[y+2][x+1].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(1, 2, x, y, memory_Piece) == false ) return false;
						}
						if(x+1 < 8 && y-2 >= 0 && (chessBoardStatus[y-2][x+1].color == PlayerColor.none || chessBoardStatus[y-2][x+1].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(1, -2, x, y, memory_Piece) == false ) return false;
						}
						
						if(x-2 >= 0 && y+1 < 8 && (chessBoardStatus[y+1][x-2].color == PlayerColor.none || chessBoardStatus[y+1][x-2].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(-2, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x-2 >= 0 && y-1 >= 0 && (chessBoardStatus[y-1][x-2].color == PlayerColor.none || chessBoardStatus[y-1][x-2].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(-2, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y+2 < 8 && (chessBoardStatus[y+2][x-1].color == PlayerColor.none || chessBoardStatus[y+2][x-1].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(-1, 2, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y-2 >= 0 && (chessBoardStatus[y-2][x-1].color == PlayerColor.none || chessBoardStatus[y-2][x-1].color == PlayerColor.black )){
							if(Checkmate_On_White_Type(-1, -2, x, y, memory_Piece) == false ) return false;
						}
						
					}else if(chessBoardStatus[y][x].type == PieceType.bishop){
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.white) break; 	//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x+i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(i, -i, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y-i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x+i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(-i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x-i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(-i, -i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y-i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x-i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
					}else if(chessBoardStatus[y][x].type == PieceType.king){
						if(x+1<8 && (chessBoardStatus[y][x+1].color == PlayerColor.none || chessBoardStatus[y][x+1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y+1<8 && (chessBoardStatus[y+1][x+1].color == PlayerColor.none || chessBoardStatus[y+1][x+1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y-1>=0 && (chessBoardStatus[y-1][x+1].color == PlayerColor.none || chessBoardStatus[y-1][x+1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(1, -1, x, y, memory_Piece) == false ) return false;
						}
						if(y+1<8 && (chessBoardStatus[y+1][x].color == PlayerColor.none || chessBoardStatus[y+1][x].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(0, 1, x, y, memory_Piece) == false ) return false;
						}
						if(y-1>=0 && (chessBoardStatus[y-1][x].color == PlayerColor.none || chessBoardStatus[y-1][x].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(0, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && (chessBoardStatus[y][x-1].color == PlayerColor.none || chessBoardStatus[y][x-1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(-1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y+1<8 && (chessBoardStatus[y+1][x-1].color == PlayerColor.none || chessBoardStatus[y+1][x-1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(-1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y-1>=0 && (chessBoardStatus[y-1][x-1].color == PlayerColor.none || chessBoardStatus[y-1][x-1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(-1, -1, x, y, memory_Piece) == false ) return false;
						}
					}else if(chessBoardStatus[y][x].type == PieceType.queen){
						
						if(x+1<8 && (chessBoardStatus[y][x+1].color == PlayerColor.none || chessBoardStatus[y][x+1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y+1<8 && (chessBoardStatus[y+1][x+1].color == PlayerColor.none || chessBoardStatus[y+1][x+1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y-1>=0 && (chessBoardStatus[y-1][x+1].color == PlayerColor.none || chessBoardStatus[y-1][x+1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(1, -1, x, y, memory_Piece) == false ) return false;
						}
						if(y+1<8 && (chessBoardStatus[y+1][x].color == PlayerColor.none || chessBoardStatus[y+1][x].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(0, 1, x, y, memory_Piece) == false ) return false;
						}
						if(y-1>=0 && (chessBoardStatus[y-1][x].color == PlayerColor.none || chessBoardStatus[y-1][x].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(0, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && (chessBoardStatus[y][x-1].color == PlayerColor.none || chessBoardStatus[y][x-1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(-1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y+1<8 && (chessBoardStatus[y+1][x-1].color == PlayerColor.none || chessBoardStatus[y+1][x-1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(-1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y-1>=0 && (chessBoardStatus[y-1][x-1].color == PlayerColor.none || chessBoardStatus[y-1][x-1].color == PlayerColor.black)){
							if(Checkmate_On_White_Type(-1, -1, x, y, memory_Piece) == false ) return false;
						}
						
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.white) break; 	//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x+i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(i, -i, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y-i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x+i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(-i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x-i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(-i, -i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y-i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x-i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.white) break; 		//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(i, 0, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x+i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(-i, 0, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x-i].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(0, i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y+i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.white) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_White_Type(0, -i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y-i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x].color == PlayerColor.black) break;	//black이면 break
								}
							}
						}
						
					}
				}
			}
		return checkmate = true;
	}
	
	boolean Checkmate_On_Black_Turn(){
		Check_On_Black_Turn();
		if(!check) return false;	//체크가 아니라면 체크메이트도 아니므로 함수 종료.
		
		end = false; check = false; checkmate = false;
		Piece memory_Piece = new Piece(PlayerColor.none, PieceType.none);
		
		for(int x=0; x<8; x++)
			for(int y=0; y<8; y++){
				if(chessBoardStatus[y][x].color == PlayerColor.black){
					if(chessBoardStatus[y][x].type == PieceType.pawn){
						if(x-1 >= 0 && getIcon(x-1,y).color == PlayerColor.none ){
							if(Checkmate_On_Black_Type(-1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y-1>=0 && getIcon(x-1,y-1).color == PlayerColor.white ){
							if(Checkmate_On_Black_Type(-1, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y+1<8 && getIcon(x-1,y+1).color == PlayerColor.white ){
							if(Checkmate_On_Black_Type(-1, 1, x, y, memory_Piece) == false ) return false;
						}
						
						if(x == 6 && getIcon(x-1,y).color == PlayerColor.none && getIcon(x-2,y).color == PlayerColor.none){
							if(Checkmate_On_Black_Type(-2, 0, x, y, memory_Piece) == false ) return false;
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.rook){
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.black) break; 		//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(i, 0, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x+i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(-i, 0, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x-i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(0, i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y+i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(0, -i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y-i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
					}
					else if(chessBoardStatus[y][x].type == PieceType.knight){
						if(x+2 < 8 && y+1 < 8 && (chessBoardStatus[y+1][x+2].color == PlayerColor.none || chessBoardStatus[y+1][x+2].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(2, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x+2 < 8 && y-1 >= 0 && (chessBoardStatus[y-1][x+2].color == PlayerColor.none || chessBoardStatus[y-1][x+2].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(2, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x+1 < 8 && y+2 < 8 && (chessBoardStatus[y+2][x+1].color == PlayerColor.none || chessBoardStatus[y+2][x+1].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(1, 2, x, y, memory_Piece) == false ) return false;
						}
						if(x+1 < 8 && y-2 >= 0 && (chessBoardStatus[y-2][x+1].color == PlayerColor.none || chessBoardStatus[y-2][x+1].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(1, -2, x, y, memory_Piece) == false ) return false;
						}
						
						if(x-2 >= 0 && y+1 < 8 && (chessBoardStatus[y+1][x-2].color == PlayerColor.none || chessBoardStatus[y+1][x-2].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(-2, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x-2 >= 0 && y-1 >= 0 && (chessBoardStatus[y-1][x-2].color == PlayerColor.none || chessBoardStatus[y-1][x-2].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(-2, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y+2 < 8 && (chessBoardStatus[y+2][x-1].color == PlayerColor.none || chessBoardStatus[y+2][x-1].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(-1, 2, x, y, memory_Piece) == false ) return false;
						}
						if(x-1 >= 0 && y-2 >= 0 && (chessBoardStatus[y-2][x-1].color == PlayerColor.none || chessBoardStatus[y-2][x-1].color == PlayerColor.white )){
							if(Checkmate_On_Black_Type(-1, -2, x, y, memory_Piece) == false ) return false;
						}
						
					}else if(chessBoardStatus[y][x].type == PieceType.bishop){
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.black) break; 	//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x+i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(i, -i, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y-i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x+i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(-i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x-i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(-i, -i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y-i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x-i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
					}else if(chessBoardStatus[y][x].type == PieceType.king){
						if(x+1<8 && (chessBoardStatus[y][x+1].color == PlayerColor.none || chessBoardStatus[y][x+1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y+1<8 && (chessBoardStatus[y+1][x+1].color == PlayerColor.none || chessBoardStatus[y+1][x+1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y-1>=0 && (chessBoardStatus[y-1][x+1].color == PlayerColor.none || chessBoardStatus[y-1][x+1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(1, -1, x, y, memory_Piece) == false ) return false;
						}
						if(y+1<8 && (chessBoardStatus[y+1][x].color == PlayerColor.none || chessBoardStatus[y+1][x].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(0, 1, x, y, memory_Piece) == false ) return false;
						}
						if(y-1>=0 && (chessBoardStatus[y-1][x].color == PlayerColor.none || chessBoardStatus[y-1][x].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(0, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && (chessBoardStatus[y][x-1].color == PlayerColor.none || chessBoardStatus[y][x-1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(-1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y+1<8 && (chessBoardStatus[y+1][x-1].color == PlayerColor.none || chessBoardStatus[y+1][x-1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(-1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y-1>=0 && (chessBoardStatus[y-1][x-1].color == PlayerColor.none || chessBoardStatus[y-1][x-1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(-1, -1, x, y, memory_Piece) == false ) return false;
						}
					}else if(chessBoardStatus[y][x].type == PieceType.queen){
						
						if(x+1<8 && (chessBoardStatus[y][x+1].color == PlayerColor.none || chessBoardStatus[y][x+1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y+1<8 && (chessBoardStatus[y+1][x+1].color == PlayerColor.none || chessBoardStatus[y+1][x+1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x+1<8 && y-1>=0 && (chessBoardStatus[y-1][x+1].color == PlayerColor.none || chessBoardStatus[y-1][x+1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(1, -1, x, y, memory_Piece) == false ) return false;
						}
						if(y+1<8 && (chessBoardStatus[y+1][x].color == PlayerColor.none || chessBoardStatus[y+1][x].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(0, 1, x, y, memory_Piece) == false ) return false;
						}
						if(y-1>=0 && (chessBoardStatus[y-1][x].color == PlayerColor.none || chessBoardStatus[y-1][x].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(0, -1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && (chessBoardStatus[y][x-1].color == PlayerColor.none || chessBoardStatus[y][x-1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(-1, 0, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y+1<8 && (chessBoardStatus[y+1][x-1].color == PlayerColor.none || chessBoardStatus[y+1][x-1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(-1, 1, x, y, memory_Piece) == false ) return false;
						}
						if(x-1>=0 && y-1>=0 && (chessBoardStatus[y-1][x-1].color == PlayerColor.none || chessBoardStatus[y-1][x-1].color == PlayerColor.white)){
							if(Checkmate_On_Black_Type(-1, -1, x, y, memory_Piece) == false ) return false;
						}
						
						for(int i=1; x+i<8 && y+i<8; i++){
							if(chessBoardStatus[y+i][x+i].color == PlayerColor.black) break; 	//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x+i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x+i<8 && y-i>=0; i++){
							if(chessBoardStatus[y-i][x+i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(i, -i, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y-i][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x+i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y+i<8; i++){
							if(chessBoardStatus[y+i][x-i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(-i, i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y+i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x-i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x-i>=0&& y-i>=0; i++){
							if(chessBoardStatus[y-i][x-i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(-i, -i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y-i][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x-i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						
						for(int i=1; x+i<8; i++){
							if(chessBoardStatus[y][x+i].color == PlayerColor.black) break; 		//막혀있을 시 break
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(i, 0, x, y, memory_Piece) == false ) return false;									
								else {
									if(chessBoardStatus[y][x+i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x+i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; x-i>=0; i++){
							if(chessBoardStatus[y][x-i].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(-i, 0, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y][x-i].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y][x-i].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; y+i<8; i++){
							if(chessBoardStatus[y+i][x].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(0, i, x, y, memory_Piece) == false ) return false;							
								else {
									if(chessBoardStatus[y+i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y+i][x].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						for(int i=1; y-i>=0; i++){
							if(chessBoardStatus[y-i][x].color == PlayerColor.black) break; 
							else{																//이동 가능할 시
								if(Checkmate_On_Black_Type(0, -i, x, y, memory_Piece) == false ) return false;								
								else {
									if(chessBoardStatus[y-i][x].color == PlayerColor.none) continue;	//none이면 continue
									else if(chessBoardStatus[y-i][x].color == PlayerColor.white) break;	//white이면 break
								}
							}
						}
						
					}
				}
			}
		return checkmate = true;
	}
	
	boolean Checkmate_On_White_Type(int x_addition, int y_addition, int x, int y, Piece memory_Piece){
		memory_Piece = getIcon(x+x_addition, y+y_addition);
		setIcon(x+x_addition, y+y_addition, getIcon(x, y));
		setIcon(x, y, new Piece(PlayerColor.none, PieceType.none));
		Check_On_White_Turn();
		setIcon(x, y, getIcon(x+x_addition, y+y_addition));
		setIcon(x+x_addition, y+y_addition, memory_Piece);
		if(!check) return false;
		else return true;
	}
	
	boolean Checkmate_On_Black_Type(int x_addition, int y_addition, int x, int y, Piece memory_Piece){
		memory_Piece = getIcon(x+x_addition, y+y_addition);
		setIcon(x+x_addition, y+y_addition, getIcon(x, y));
		setIcon(x, y, new Piece(PlayerColor.none, PieceType.none));
		Check_On_Black_Turn();
		setIcon(x, y, getIcon(x+x_addition, y+y_addition));
		setIcon(x+x_addition, y+y_addition, memory_Piece);
		if(!check) return false;
		else return true;
	}
	
	void onInitiateBoard(){
		turn = TURN.BLACK_TURN;
		setStatus("BLACK'S TURN");
	}
}


